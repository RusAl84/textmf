package ui.javafx;import common.InputOpenException;import javafx.collections.FXCollections;import javafx.collections.ObservableList;import javafx.fxml.FXML;import javafx.scene.control.*;import javafx.stage.FileChooser;import javafx.stage.Modality;import javafx.stage.Stage;import model.memory.short_time.Text;import model.memory.short_time.Word;import java.io.*;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Scanner;public class Controller {    private Map<String, Text> textData = new HashMap<>();    private Text curTextData = null;    private String fpath;    private ObservableList usersData = FXCollections.observableArrayList();    @FXML    private Button btn_loadtf;    @FXML    private Button btn_cleartf;    @FXML    private Button btn_analiztf;    @FXML    private Button btn_gettheme;    @FXML    private TextArea ttext;    @FXML    private TextArea ttheme;    @FXML    private  TableView<WordWrapper> ttable;    @FXML    private TableColumn<WordWrapper, String> tc_word;    @FXML    private TableColumn<WordWrapper, String> tc_weight;    @FXML    private TableColumn<WordWrapper, String> tc_count;    @FXML    private CheckBox chbx;    public void btn_loadtf_act() throws FileNotFoundException {            Stage myDialog = new Stage();            myDialog.initModality(Modality.WINDOW_MODAL);            FileChooser fileChooser = new FileChooser();            fileChooser.setTitle("Выберите файл");            fileChooser.getExtensionFilters().add(                    new FileChooser.ExtensionFilter("*", "*"));            File file = fileChooser.showOpenDialog(null);            if (file != null) {                //primaryStage.setTitle(file.getPath());                FileManager.filesProperty().add(                        new FileManager.FileWrapper(file.getPath(), "test"));                try {                    Text text = new Text(file.getPath());                    curTextData = text;                    Scanner s = new Scanner(new File(file.getPath())).useDelimiter("\\s+");                    ttext.setText("");                    while (s.hasNext()) {                        ttext.appendText(s.next() + " "); // else read the next token                    }                }                catch (InputOpenException e) { e.printStackTrace();  }            }    }    @FXML    public void btn_cleartf_act(){        ttext.setText("");    }    @FXML    public void btn_analiztf_act() throws InputOpenException {      //  ttext.setText("");        if (ttext.getLength()>1){            try {                FileWriter fw;                String str=ttext.getText();                String fstr="temptmp.txt";                fw = new FileWriter(fstr);                fw.flush();                fw.append(str);                fw.close();                Text text = null;                try {                    text = new Text(fstr);                } catch (InputOpenException e) {                    e.printStackTrace();                }                curTextData = text;            }            catch (IOException ex) {System.out.println("error write file debug");} //error        }        final ObservableList<WordWrapper> results = FXCollections.observableArrayList();        results.clear();            if (curTextData != null) {                List<Word> words = curTextData.getWords();                for (Word word : words) {                    results.add(new WordWrapper(word.toString(), String.valueOf(curTextData.getWordWeight(word)), String.valueOf(word.getCount()-1)));                }                // заполняем таблицу данными                ttable.setItems(results);        }    }    @FXML    public void btn_gettheme_act(){        Translit tr = new Translit();        String str=ttext.getText();        Text text = null;        if (str.length()>1){            try {                FileWriter fw;                //translit                if (chbx.isSelected()){                    str = str.replaceAll("\\p{Punct}","");                    str=removePunct( str);                     str = tr.cyr2lat(str);}                String fstr="temptmp.txt";                fw = new FileWriter(fstr);               // fw.flush();                //fw.write(str);                fw.append(str);                fw.close();                try {                   // transform(fstr,"utf-8",fstr,"utf-8");                    text = new Text(fstr);                } catch (InputOpenException e) {                    e.printStackTrace();                }                curTextData = text;            }            catch (IOException ex) {System.out.println("error write file debug");} //error        }            if(curTextData != null) {                List<Word> theme = curTextData.getThem();                if(theme != null){                    StringBuilder sb = new StringBuilder();                    for(int i = 0 ; i < theme.size(); ++i)                        sb.append(theme.get(i) + " ");                    str=sb.toString();                    if (chbx.isSelected()){  str= tr.lat2cyr(str);}                    ttheme.setText(str); /// текст темы                }            }    }    public static String removePunct(String str) {        StringBuilder result = new StringBuilder(str.length());        for (int i = 0; i < str.length(); i++) {            char c = str.charAt(i);            if (Character.isAlphabetic(c) || Character.isDigit(c) || Character.isSpaceChar(c)) {                result.append(c);            }        }        return result.toString();    }    public static void transform(String source, String srcEncoding, String target, String tgtEncoding) throws IOException {        BufferedReader br = null;        BufferedWriter bw = null;        try{            br = new BufferedReader(new InputStreamReader(new FileInputStream(source),srcEncoding));            bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(target), tgtEncoding));            char[] buffer = new char[16384];            int read;            while ((read = br.read(buffer)) != -1)                bw.write(buffer, 0, read);        } finally {            try {                if (br != null)                    br.close();            } finally {                if (bw != null)                    bw.close();            }        }    }}